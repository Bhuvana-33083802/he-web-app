{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bguda\\\\Desktop\\\\HE-WebApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [patientData, setPatientData] = useState(null); // Store encrypted data\n  const [loading, setLoading] = useState(true); // For loading state\n\n  useEffect(() => {\n    // Sending a request to Flask backend to get encrypted data\n    axios.get(\"http://127.0.0.1:5000/api/encrypt\").then(response => {\n      console.log(response.data); // Log encrypted data in the browser console\n      setPatientData(response.data); // Set patient data state with the response\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n      setLoading(false); // Set loading to false even in case of error\n    });\n  }, []); // The empty array ensures this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Encrypted Patient Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading encrypted data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) // Show loading message while fetching\n    : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: patientData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Patient ID: \", patientData.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Glucose Level (Encrypted): \", patientData.glucose_level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Blood Pressure (Encrypted): \", patientData.blood_pressure]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error loading data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this) // Handle case if patientData is not found\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XL2SnXw1rBaWlPGwvzy7Vl/HeyE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","patientData","setPatientData","loading","setLoading","get","then","response","console","log","data","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","glucose_level","blood_pressure","_c","$RefreshReg$"],"sources":["C:/Users/Bguda/Desktop/HE-WebApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [patientData, setPatientData] = useState(null); // Store encrypted data\n  const [loading, setLoading] = useState(true); // For loading state\n\n  useEffect(() => {\n    // Sending a request to Flask backend to get encrypted data\n    axios\n      .get(\"http://127.0.0.1:5000/api/encrypt\")\n      .then((response) => {\n        console.log(response.data); // Log encrypted data in the browser console\n        setPatientData(response.data); // Set patient data state with the response\n        setLoading(false); // Set loading to false after data is fetched\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false); // Set loading to false even in case of error\n      });\n  }, []); // The empty array ensures this runs once when the component mounts\n\n  return (\n    <div className=\"App\">\n      <h1>Encrypted Patient Data</h1>\n      {loading ? (\n        <p>Loading encrypted data...</p> // Show loading message while fetching\n      ) : (\n        <div>\n          {patientData ? (\n            <div>\n              <p>Patient ID: {patientData.id}</p>\n              <p>Glucose Level (Encrypted): {patientData.glucose_level}</p>\n              <p>Blood Pressure (Encrypted): {patientData.blood_pressure}</p>\n            </div>\n          ) : (\n            <p>Error loading data.</p> // Handle case if patientData is not found\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CACFS,GAAG,CAAC,mCAAmC,CAAC,CACxCC,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAC5BR,cAAc,CAACK,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAC/BN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDO,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEN,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA;MAAAgB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9Bf,OAAO,gBACNL,OAAA;MAAAgB,QAAA,EAAG;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;IAAA,eAEjCpB,OAAA;MAAAgB,QAAA,EACGb,WAAW,gBACVH,OAAA;QAAAgB,QAAA,gBACEhB,OAAA;UAAAgB,QAAA,GAAG,cAAY,EAACb,WAAW,CAACkB,EAAE;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnCpB,OAAA;UAAAgB,QAAA,GAAG,6BAA2B,EAACb,WAAW,CAACmB,aAAa;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7DpB,OAAA;UAAAgB,QAAA,GAAG,8BAA4B,EAACb,WAAW,CAACoB,cAAc;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC,gBAENpB,OAAA;QAAAgB,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IAC5B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAClB,EAAA,CAvCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}